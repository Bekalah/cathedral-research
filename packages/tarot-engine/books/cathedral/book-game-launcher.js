#!/usr/bin/env node

/**
 * CATHEDRAL BOOK GAME LAUNCHER
 * Unified entry point for the complete book game system
 */

import { MagicalMysteryHouse } from './packages/magical-mystery-house/index.js';
import { Circuitum99AlphaOmega } from './packages/circuitum99/index.js';

class CathedralBookGameLauncher {
    constructor() {
        this.mysteryHouse = new MagicalMysteryHouse();
        this.circuitum99 = new Circuitum99AlphaOmega();
        
        console.log('üèõÔ∏è‚ú® CATHEDRAL BOOK GAME SYSTEM INITIALIZED ‚ú®üèõÔ∏è');
        console.log('');
    }
    
    // Main game menu
    showMainMenu() {
        console.log('üéÆ === CATHEDRAL BOOK GAME === üéÆ');
        console.log('');
        console.log('üè† MAGICAL MYSTERY HOUSE - Navigate all Cathedral systems');
        console.log('   ‚Ä¢ Soul Library: Circuitum99 Alpha et Omega book game');
        console.log('   ‚Ä¢ Body Archive: Stone-Grimoire chapel navigation');
        console.log('   ‚Ä¢ Spirit Observatory: Cosmogenesis Learning Engine');
        console.log('   ‚Ä¢ Fusion Chamber: 144:99 Kink Heaven (consent required)');
        console.log('   ‚Ä¢ Plus 4 more mystery rooms...');
        console.log('');
        console.log('üìö CIRCUITUM99 ALPHA ET OMEGA - The Sacred Book Game');
        console.log('   ‚Ä¢ 99 Gates: Alpha (1-33), Mystery (34-66), Omega (67-99)');
        console.log('   ‚Ä¢ 144 Sacred Lattice: 12√ó12 constellation grid');
        console.log('   ‚Ä¢ HTML Visualization: Sacred geometry animations');
        console.log('   ‚Ä¢ Trauma-informed wisdom navigation');
        console.log('');
        console.log('üåü QUICK START OPTIONS:');
        console.log('   1. Enter Mystery House (full navigation)');
        console.log('   2. Start Circuitum99 Book Game (99 gates journey)');
        console.log('   3. Open Alpha et Omega Visualization');
        console.log('   4. Random sacred entry point');
        console.log('');
    }
    
    // Launch Mystery House navigation
    async launchMysteryHouse() {
        console.log('üè† ENTERING MAGICAL MYSTERY HOUSE...');
        console.log('');
        
        const status = this.mysteryHouse.getSystemStatus();
        console.log('System Status:', JSON.stringify(status, null, 2));
        console.log('');
        
        console.log('üö™ AVAILABLE ROOMS:');
        const rooms = Object.keys(this.mysteryHouse.mysteryRooms);
        rooms.forEach(room => {
            console.log(`   ‚Ä¢ ${room}: ${this.mysteryHouse.mysteryRooms[room]}`);
        });
        console.log('');
        
        // Example room access
        const soulLibrary = this.mysteryHouse.accessRoom('SOUL_LIBRARY');
        console.log('üìö SOUL LIBRARY CONNECTION:');
        console.log(JSON.stringify(soulLibrary, null, 2));
        console.log('');
    }
    
    // Launch Circuitum99 book game
    async launchCircuitum99() {
        console.log('üìö STARTING CIRCUITUM99 ALPHA ET OMEGA BOOK GAME...');
        console.log('');
        
        const gameStart = this.circuitum99.startBookGame();
        console.log('üéÆ BOOK GAME MECHANICS:');
        console.log(JSON.stringify(gameStart, null, 2));
        console.log('');
        
        // Example gate entry
        const gate1 = this.circuitum99.enterGate(1);
        console.log('üö™ ENTERING GATE 1 (Alpha - New Beginning):');
        console.log(JSON.stringify(gate1, null, 2));
        console.log('');
        
        // Example lattice navigation  
        const lattice = this.circuitum99.navigateLattice(1, 1);
        console.log('üîÆ LATTICE POINT [1,1] NAVIGATION:');
        console.log(JSON.stringify(lattice, null, 2));
        console.log('');
    }
    
    // Open HTML visualization
    async openVisualization() {
        console.log('üé® OPENING ALPHA ET OMEGA VISUALIZATION...');
        console.log('');
        console.log('HTML Portal: ./circuitum99-alpha-et-omega.html');
        console.log('Features:');
        console.log('   ‚Ä¢ Sacred geometry animations');
        console.log('   ‚Ä¢ Interactive 99 gates navigation');
        console.log('   ‚Ä¢ 144 lattice constellation mapping');
        console.log('   ‚Ä¢ Theosophical and Avalon current visualizations');
        console.log('   ‚Ä¢ Trauma-safe color palettes');
        console.log('');
        console.log('üåê Open in browser: file://' + process.cwd() + '/circuitum99-alpha-et-omega.html');
        console.log('');
    }
    
    // Random entry point
    async randomEntry() {
        console.log('üé≤ GENERATING RANDOM SACRED ENTRY POINT...');
        console.log('');
        
        const randomGate = Math.floor(Math.random() * 99) + 1;
        const randomRow = Math.floor(Math.random() * 12) + 1;
        const randomCol = Math.floor(Math.random() * 12) + 1;
        
        console.log(`üö™ Random Gate: ${randomGate}`);
        const gateInfo = this.circuitum99.enterGate(randomGate);
        console.log(JSON.stringify(gateInfo, null, 2));
        console.log('');
        
        console.log(`üîÆ Random Lattice: [${randomRow}, ${randomCol}]`);
        const latticeInfo = this.circuitum99.navigateLattice(randomRow, randomCol);
        console.log(JSON.stringify(latticeInfo, null, 2));
        console.log('');
    }
    
    // Integration status
    async showIntegrationStatus() {
        console.log('üîó SYSTEM INTEGRATION STATUS:');
        console.log('');
        
        const mysteryStatus = this.mysteryHouse.getSystemStatus();
        const circuitumStatus = this.circuitum99.getSystemStatus();
        const connection = this.circuitum99.connectToMysteryHouse();
        
        console.log('Mystery House:', JSON.stringify(mysteryStatus, null, 2));
        console.log('');
        console.log('Circuitum99:', JSON.stringify(circuitumStatus, null, 2));
        console.log('');
        console.log('Integration:', JSON.stringify(connection, null, 2));
        console.log('');
    }
    
    // Main launcher
    async run() {
        this.showMainMenu();
        
        console.log('üöÄ RUNNING DEMONSTRATION...');
        console.log('');
        
        await this.showIntegrationStatus();
        await this.launchMysteryHouse();
        await this.launchCircuitum99();
        await this.openVisualization();
        await this.randomEntry();
        
        console.log('‚ú® CATHEDRAL BOOK GAME SYSTEM READY FOR EXPLORATION ‚ú®');
        console.log('üõ°Ô∏è All systems trauma-informed with consent protocols active üõ°Ô∏è');
        console.log('');
    }
}

// Launch if run directly
if (import.meta.url === `file://${process.argv[1]}`) {
    const launcher = new CathedralBookGameLauncher();
    launcher.run().catch(console.error);
}

export { CathedralBookGameLauncher };